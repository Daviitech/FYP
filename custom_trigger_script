#!/bin/bash
# custom_trigger_config.sh
# Script for configuring advanced triggers with dependencies in Zabbix
# This script demonstrates the alert correlation implementation described in Section 4.6.3
#
# Usage: ./custom_trigger_config.sh [zabbix_api_url] [username] [password]

API_URL="${1:-http://localhost/zabbix/api_jsonrpc.php}"
USERNAME="${2:-Admin}"
PASSWORD="${3:-zabbix}"

# Colors for better readability
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}Zabbix Custom Trigger Configuration${NC}"
echo -e "Configuring advanced triggers with dependencies to reduce alert storms"
echo -e "API URL: ${API_URL}"

# Authenticate with Zabbix API
echo -e "\n${YELLOW}Authenticating with Zabbix API...${NC}"
AUTH_TOKEN=$(curl -s -X POST -H 'Content-Type: application/json-rpc' -d "{
    \"jsonrpc\": \"2.0\",
    \"method\": \"user.login\",
    \"params\": {
        \"username\": \"${USERNAME}\",
        \"password\": \"${PASSWORD}\"
    },
    \"id\": 1
}" $API_URL | jq -r '.result')

if [ -z "$AUTH_TOKEN" ] || [ "$AUTH_TOKEN" == "null" ]; then
    echo -e "${RED}Authentication failed. Please check credentials.${NC}"
    exit 1
fi

echo -e "${GREEN}Successfully authenticated${NC}"

# Function to create a trigger with description
create_trigger() {
    local host_id=$1
    local expression=$2
    local name=$3
    local priority=$4
    local description=$5
    
    echo -e "\n${YELLOW}Creating trigger: ${name}${NC}"
    
    TRIGGER_ID=$(curl -s -X POST -H 'Content-Type: application/json-rpc' -d "{
        \"jsonrpc\": \"2.0\",
        \"method\": \"trigger.create\",
        \"params\": [{
            \"description\": \"${name}\",
            \"expression\": \"${expression}\",
            \"priority\": \"${priority}\",
            \"comments\": \"${description}\",
            \"tags\": [
                {
                    \"tag\": \"scope\",
                    \"value\": \"network\"
                },
                {
                    \"tag\": \"service\",
                    \"value\": \"connectivity\"
                }
            ]
        }],
        \"auth\": \"${AUTH_TOKEN}\",
        \"id\": 2
    }" $API_URL | jq -r '.result.triggerids[0]')
    
    if [ -z "$TRIGGER_ID" ] || [ "$TRIGGER_ID" == "null" ]; then
        echo -e "${RED}Failed to create trigger.${NC}"
        return 1
    fi
    
    echo -e "${GREEN}Successfully created trigger with ID: ${TRIGGER_ID}${NC}"
    echo $TRIGGER_ID
}

# Function to create a dependency between triggers
create_dependency() {
    local trigger_id=$1
    local dependency_id=$2
    
    echo -e "\n${YELLOW}Creating dependency relationship...${NC}"
    
    RESULT=$(curl -s -X POST -H 'Content-Type: application/json-rpc' -d "{
        \"jsonrpc\": \"2.0\",
        \"method\": \"trigger.adddependencies\",
        \"params\": {
            \"triggerid\": \"${trigger_id}\",
            \"dependsOnTriggerid\": \"${dependency_id}\"
        },
        \"auth\": \"${AUTH_TOKEN}\",
        \"id\": 3
    }" $API_URL | jq -r '.result')
    
    if [ -z "$RESULT" ] || [ "$RESULT" == "null" ]; then
        echo -e "${RED}Failed to create dependency.${NC}"
        return 1
    fi
    
    echo -e "${GREEN}Successfully created dependency relationship${NC}"
}

# Get host ID
echo -e "\n${YELLOW}Finding host ID...${NC}"
HOST_ID=$(curl -s -X POST -H 'Content-Type: application/json-rpc' -d "{
    \"jsonrpc\": \"2.0\",
    \"method\": \"host.get\",
    \"params\": {
        \"filter\": {
            \"host\": [\"WebServer\"]
        }
    },
    \"auth\": \"${AUTH_TOKEN}\",
    \"id\": 4
}" $API_URL | jq -r '.result[0].hostid')

if [ -z "$HOST_ID" ] || [ "$HOST_ID" == "null" ]; then
    echo -e "${RED}Host not found. Creating example host...${NC}"
    
    HOST_ID=$(curl -s -X POST -H 'Content-Type: application/json-rpc' -d "{
        \"jsonrpc\": \"2.0\",
        \"method\": \"host.create\",
        \"params\": {
            \"host\": \"WebServer\",
            \"interfaces\": [
                {
                    \"type\": 1,
                    \"main\": 1,
                    \"useip\": 1,
                    \"ip\": \"192.168.1.100\",
                    \"dns\": \"\",
                    \"port\": \"10050\"
                }
            ],
            \"groups\": [
                {
                    \"groupid\": \"2\"
                }
            ],
            \"tags\": [
                {
                    \"tag\": \"environment\",
                    \"value\": \"production\"
                }
            ]
        },
        \"auth\": \"${AUTH_TOKEN}\",
        \"id\": 5
    }" $API_URL | jq -r '.result.hostids[0]')
    
    if [ -z "$HOST_ID" ] || [ "$HOST_ID" == "null" ]; then
        echo -e "${RED}Failed to create host.${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}Created host with ID: ${HOST_ID}${NC}"
fi

echo -e "${GREEN}Using host ID: ${HOST_ID}${NC}"

# Create Master Trigger (Network Connectivity)
echo -e "\n${BLUE}Creating network connectivity master trigger...${NC}"
MASTER_TRIGGER_ID=$(create_trigger $HOST_ID "{Host:icmpping.max(#3)}=0" "Network connectivity is lost" "4" "Host is not responding to ICMP pings")

# Create Dependent Trigger 1 (Web Server)
echo -e "\n${BLUE}Creating web server dependent trigger...${NC}"
WEB_TRIGGER_ID=$(create_trigger $HOST_ID "{Host:web.test.fail.min(#3)}>0" "Web server is unavailable" "4" "Web server is not responding")

# Create Dependent Trigger 2 (Database Connection)
echo -e "\n${BLUE}Creating database connection dependent trigger...${NC}"
DB_TRIGGER_ID=$(create_trigger $HOST_ID "{Host:db.odbc.select[ping,sample].last()}=0" "Database connection is lost" "4" "Cannot connect to database server")

# Create Dependent Trigger 3 (Email Service)
echo -e "\n${BLUE}Creating email service dependent trigger...${NC}"
EMAIL_TRIGGER_ID=$(create_trigger $HOST_ID "{Host:net.tcp.service[smtp].last()}=0" "Email service is down" "3" "SMTP service is not running")

# Create Dependencies
if [ -n "$MASTER_TRIGGER_ID" ] && [ -n "$WEB_TRIGGER_ID" ]; then
    echo -e "\n${BLUE}Setting up web server dependency on network connectivity...${NC}"
    create_dependency $WEB_TRIGGER_ID $MASTER_TRIGGER_ID
fi

if [ -n "$MASTER_TRIGGER_ID" ] && [ -n "$DB_TRIGGER_ID" ]; then
    echo -e "\n${BLUE}Setting up database connection dependency on network connectivity...${NC}"
    create_dependency $DB_TRIGGER_ID $MASTER_TRIGGER_ID
fi

if [ -n "$MASTER_TRIGGER_ID" ] && [ -n "$EMAIL_TRIGGER_ID" ]; then
    echo -e "\n${BLUE}Setting up email service dependency on network connectivity...${NC}"
    create_dependency $EMAIL_TRIGGER_ID $MASTER_TRIGGER_ID
fi

# Logout
echo -e "\n${YELLOW}Logging out from Zabbix API...${NC}"
curl -s -X POST -H 'Content-Type: application/json-rpc' -d "{
    \"jsonrpc\": \"2.0\",
    \"method\": \"user.logout\",
    \"params\": [],
    \"auth\": \"${AUTH_TOKEN}\",
    \"id\": 6
}" $API_URL > /dev/null

echo -e "\n${GREEN}Trigger configuration completed successfully!${NC}"
echo -e "\n${BLUE}Summary of Alert Correlation Implementation:${NC}"
echo -e "Created master trigger: Network connectivity is lost"
echo -e "Created dependent triggers:"
echo -e "  - Web server is unavailable"
echo -e "  - Database connection is lost"
echo -e "  - Email service is down"
echo -e "\nThese dependencies ensure that during network outages, only the master"
echo -e "trigger generates alerts, preventing alert storms from dependent services."
echo -e "This implementation addresses the challenge described in Section 4.6.3."

exit 0
